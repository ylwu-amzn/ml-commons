/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 *
 */

import org.opensearch.gradle.test.RestIntegTestTask

plugins {
    id 'java'
    id 'nebula.ospackage'
    id "io.freefair.lombok"
    id 'jacoco'
    id 'java-library'
    id "com.diffplug.gradle.spotless" version "3.26.1"
    id 'checkstyle'
}

ext {
    opensearchVersion = "${opensearch_version}"
    isSnapshot = "true" == System.getProperty("build.snapshot", "true")
}

apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.testclusters'
ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE')
}

opensearchplugin {
    name 'opensearch-ml-plugin'
    description 'machine learning plugin for opensearch'
    classname 'org.opensearch.ml.plugin.MachineLearningPlugin'
}

dependencies {
    compile project(':opensearch-ml-common')
    compile project(':opensearch-ml-algorithms')

    compile group: 'org.opensearch', name: 'opensearch', version: "${opensearch_version}"
    compile "org.opensearch.client:opensearch-rest-client:${opensearch_version}"
    compile "org.opensearch:common-utils:${common_utils_version}"
    compile("com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}")
    compile("com.fasterxml.jackson.core:jackson-databind:${versions.jackson}")
    compile group: 'com.google.guava', name: 'guava', version:'29.0-jre'

    checkstyle "com.puppycrawl.tools:checkstyle:${project.checkstyle.toolVersion}"
}

test {
    include '**/*Test.class'
    systemProperty 'tests.security.manager', 'false'
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled true
    }
}

compileJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
}

/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 *
 */

//TODO: check which one should be enabled
licenseHeaders.enabled = false
testingConventions.enabled = false
checkstyleTest.enabled = false
forbiddenApis.ignoreFailures = false
dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false
forbiddenApisTest.ignoreFailures = true
forbiddenApisMain.ignoreFailures = true
validateNebulaPom.enabled = false
checkstyleMain.enabled = false
loggerUsageCheck.enabled = false

def _numNodes = findProperty('numNodes') as Integer ?: 1

def opensearch_tmp_dir = rootProject.file('build/private/opensearch_tmp').absoluteFile
opensearch_tmp_dir.mkdirs()

test {
    include '**/*Tests.class'
    systemProperty 'tests.security.manager', 'false'
}

task integTest(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
    dependsOn "bundlePlugin"
    systemProperty 'tests.security.manager', 'false'
    systemProperty 'java.io.tmpdir', opensearch_tmp_dir.absolutePath

    systemProperty "https", System.getProperty("https")
    systemProperty "user", System.getProperty("user")
    systemProperty "password", System.getProperty("password")

    // The 'doFirst' delays till execution time.
    doFirst {
        // Tell the test JVM if the cluster JVM is running under a debugger so that tests can
        // use longer timeouts for requests.
        def isDebuggingCluster = getDebug() || System.getProperty("test.debug") != null
        systemProperty 'cluster.debug', isDebuggingCluster
        // Set number of nodes system property to be used in tests
        systemProperty 'cluster.number_of_nodes', "${_numNodes}"
        // There seems to be an issue when running multi node run or integ tasks with unicast_hosts
        // not being written, the waitForAllConditions ensures it's written
        getClusters().forEach { cluster ->
            cluster.waitForAllConditions()
        }
    }

    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}

testClusters.integTest {
    testDistribution = "ARCHIVE"
    // Cluster shrink exception thrown if we try to set numberOfNodes to 1, so only apply if > 1
    if (_numNodes > 1) numberOfNodes = _numNodes
    // When running integration tests it doesn't forward the --debug-jvm to the cluster anymore
    // i.e. we have to use a custom property to flag when we want to debug elasticsearch JVM
    // since we also support multi node integration tests we increase debugPort per node
    if (System.getProperty("opensearch.debug") != null) {
        def debugPort = 5005
        nodes.forEach { node ->
            node.jvmArgs("-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=*:${debugPort}")
            debugPort += 1
        }
    }
    plugin(project.tasks.bundlePlugin.archiveFile)

    nodes.each { node ->
        def plugins = node.plugins
        def firstPlugin = plugins.get(0)
        plugins.remove(0)
        plugins.add(firstPlugin)
    }
}

run {
    doFirst {
        // There seems to be an issue when running multi node run or integ tasks with unicast_hosts
        // not being written, the waitForAllConditions ensures it's written
        getClusters().forEach { cluster ->
            cluster.waitForAllConditions()
        }
    }

    useCluster testClusters.integTest
}

task release(type: Copy, group: 'build') {
    dependsOn allprojects*.tasks.build
    from(zipTree(project.tasks.bundlePlugin.outputs.files.getSingleFile()))
    into "build/plugins/opensearch-machine-learning"
    includeEmptyDirs = false
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }

    dependsOn test
}

List<String> jacocoExclusions = [
        // TODO: add more unit test to meet the minimal test coverage.
        'org.opensearch.ml.action.*',
        'org.opensearch.ml.constant.CommonValue',
        'org.opensearch.ml.indices.MLInputDatasetHandler',
        'org.opensearch.ml.plugin.*',
        'org.opensearch.ml.task.MLTaskDispatcher',
        'org.opensearch.ml.task.MLTaskRunner',
        'org.opensearch.ml.task.MLTrainingTaskRunner',
        'org.opensearch.ml.task.MLPredictTaskRunner',
        'org.opensearch.ml.rest.RestMLTrainingAction',
        'org.opensearch.ml.rest.RestMLPredictionAction',
        'org.opensearch.ml.utils.RestActionUtils',
        'org.opensearch.ml.task.MLTaskCache',
        'org.opensearch.ml.task.MLTaskManager',
        'org.opensearch.ml.task.MLTrainAndPredictTaskRunner'
]

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = jacocoExclusions
            limit {
                counter = 'BRANCH'
                minimum = 0.8
            }
        }
        rule {
            element = 'CLASS'
            excludes = jacocoExclusions
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.3 //TODO: add more test to meet the coverage bar 0.7
            }
        }
    }
    dependsOn jacocoTestReport
}
check.dependsOn jacocoTestCoverageVerification

configurations.all {
    resolutionStrategy.force 'junit:junit:4.12'
    resolutionStrategy.force 'org.apache.commons:commons-lang3:3.10'
    resolutionStrategy.force 'commons-logging:commons-logging:1.2'
}

spotless {
    java {
        removeUnusedImports()
        importOrder 'java', 'javax', 'org', 'com'

        eclipse().configFile rootProject.file('.eclipseformat.xml')
    }
}

checkstyle {
    toolVersion = '8.29'
}
